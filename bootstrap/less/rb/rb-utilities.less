/* Utility Classes developed by red balloon */

/* Create full height containers and rows that start at the bottom of the page */
.container{
	.row.bottom{
		/* Positions row at bottom of a container. only use when container has set height */
		position: absolute;
		bottom: 0;
		left: (@grid-gutter-width / 2); /* Taken from grid.less . gives row correct position within the padding of the parent element. */
		width: 100%;
	}
}
/* Window height elements */
.window-height{
	position: relative;
	height: 100vh;
	.row{
		height: 100%;
		&.bottom{
			height: auto;
		}
	}
}
/* Absolutly positioned elements, to go within containers or full-width elements */
.abs-wrap{
  position: absolute;
  left: 0;
  top:0;
  width: 100%;
  height: auto;
}
.row-abs{
  position: absolute;
  left: 0;
  right: 0;
  top:0;
  .clearfix();
}

/* Add an element for use as a background where the other elemnt needs a seperate background element */
.bg{
	/* Requires position relative on parent element */
	.abs-cover(0);
	.cover-bg();
	pointer-events: none;
	z-index: -1;
}

/* Add an overlay to an element. Add hover class to add hover state */
.overlay{
	.abs-cover(0);
	pointer-events: none;
	background-color: #000;
	opacity: 0.6;
	&.hover{
		opacity: 0;
	}
}
:hover > .overlay.hover{
	opacity: 0.6;
}


/* Add text that appers in the center of a parent element on hover. Parent needs position relative */
.hover-text{
	.abs-cover(0);
	position: absolute;
	display: none;
	span{
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translateX(-50%) translateY(-50%);
	}
}
:hover > .hover-text{
	opacity: 1;
	display: block;
}

/*
Media wraps
These elements are used to wrap media elements
*/
.image-wrap{
	width: 100%;
	position: relative;
	img{
		width: 100%;
	}
}
.video-wrap{
	position: relative;
	iframe{
		width: 100%;
	}
	&.video-wide{
		.aspect-ratio(16, 9);
	}
	&.video-standard{
		.aspect-ratio(4,3);
	}
	&.aspect-cust-1{
		.aspect-ratio(854,414);
	}
	video{
		width: 100%;
		height: auto;
	}
}

/* captioned wraps */
.captioned{
	.title{
	}
	.caption{
	}
}



/* Aspect ratio classes: */
.aspect-16-9{
	.aspect-ratio(16, 9);
}
.aspect-4-3{
	.aspect-ratio(4, 3);
}
.aspect-golden{
	.aspect-ratio(1.618, 1);
}



/* Makes element full width of parent. Used to add full-width panels. */
.full-width{
	width: 100%;
	position: relative;
}
.half-width{
	width: 50%;
	position: relative;
}

/* Calls to action */
.cta{
	position: relative;
	&.cta-lg{
		min-height: 200px;
		position: relative;
	}
	&.cta-md{
		position: relative;
		min-height: 120px;
	}
	&.cta-sm{
		position: relative;
		min-height: 80px;
	}
	&.cta-fluid{
		padding-left: 0;
		padding-right: 0;
	}
	.cta-content{
		.abs-cover(0);
	}
	.above-overlay{
		z-index: 5;
	}
}


/* Utility padding and margin classes*/

.panel-margin-top {
	margin-top: @plv;
}
.panel-half-margin-top {
	margin-top: @pbv;
}
.panel-half-margin-bottom {
	margin-bottom: @pbv;
}
.panel-large-margin-top {
	margin-top: @plh;
}
.panel-large-margin-bottom {
	margin-bottom: @plh;
}
.panel-margin-bottom {
	margin-bottom: @plv;
}
.panel-small-margin-bottom {
	margin-bottom: @psv;
}
.panel-padding-top {
	padding-top: @plv;
}
.panel-padding-bottom {
	padding-bottom: @plv;
}
.panel-large-padding-top {
	padding-top: @plh;
}
.panel-large-padding-bottom {
	padding-bottom: @plh;
}
.panel-half-padding-bottom {
	padding-bottom: @pbv;
}
.panel-half-padding-top{
	padding-top: @pbv;
}
.uppercase{
	text-transform: uppercase;
}
.no-margin-bottom {
	margin-bottom: 0;
}
.no-margin{
	margin: 0;
}
@media screen and (max-width:@screen-xs-max){
	.xs-no-margin{
		margin: 0;
	}
	.xs-smaller-text,
	.xs-smaller-text p{
		font-size: 14px;
		line-height: 24px;
	}
}

/* Using images for a background */
.img-bg{
	position: relative;
	img{
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		z-index: 0;
		object-fit: cover;
	}
}
/* Fallback */
.no-object-fit{
	.img-bg {
		overflow: hidden;
		img{
			height: auto;
			width: auto;
			min-width: 100%;
			min-height: 100%;
			left: 50%;
			top: 50%;
			transform: translate(-50%, -50%);
		}
	}
}


/*
Flex grids
*/
.row-flex{
	/*
	Use this class instead of .row to make all the columns in a grid use flexbox alignment.
	*/
	.row();
	display: flex;
	flex-wrap: wrap;
}

.flex{
	/* adds display flex. Add this to to nested flex elements (like columns) if you want to align elements within in the column using flexbox.*/
	display: flex;
}
